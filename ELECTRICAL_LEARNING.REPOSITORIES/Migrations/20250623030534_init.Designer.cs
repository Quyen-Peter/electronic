// <auto-generated />
using System;
using ElectricalLearning.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ElectricalLearning.Repositories.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250623030534_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ElectricalLearning.Repositories.Entities.AIRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("AIRequest");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 6, 23, 3, 5, 33, 746, DateTimeKind.Unspecified).AddTicks(3364), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "https://example.com/image1.png",
                            IsDeleted = false,
                            Status = "Pending",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("ElectricalLearning.Repositories.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Accounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 6, 23, 3, 5, 33, 471, DateTimeKind.Unspecified).AddTicks(6571), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "teacher@gmail.com",
                            FullName = "Nguyễn Văn A",
                            IsDeleted = false,
                            PasswordHash = "$2a$11$1plzKL4WnDiQQ3hIR5/Xa.KHq2BM3coLkYhh/JgY8xgL/d7R.e1oO",
                            Role = "Teacher",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 6, 23, 3, 5, 33, 609, DateTimeKind.Unspecified).AddTicks(3992), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "student@gmail.com",
                            FullName = "Trần Thị B",
                            IsDeleted = false,
                            PasswordHash = "$2a$11$7.F7A4vVpqnM1EtrdCf9EODC17SVV/auqZw307cuOuSkAtkYLdgpO",
                            Role = "Student",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 6, 23, 3, 5, 33, 745, DateTimeKind.Unspecified).AddTicks(9750), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "admin@gmail.com",
                            FullName = "Lê Văn C",
                            IsDeleted = false,
                            PasswordHash = "$2a$11$U33PupEzmnLMpPAByaBFjeGFri91b345iCWksFcHYPIzka3r/2gP6",
                            Role = "Admin",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("ElectricalLearning.Repositories.Entities.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GradeId");

                    b.ToTable("Chapter");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GradeId = 1,
                            IsDeleted = false,
                            Name = "Điện học cơ bản"
                        });
                });

            modelBuilder.Entity("ElectricalLearning.Repositories.Entities.CircuitModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int?>("ChapterId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JsonData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ChapterId");

                    b.HasIndex("LessonId");

                    b.ToTable("CircuitModel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 6, 23, 3, 5, 33, 746, DateTimeKind.Unspecified).AddTicks(5974), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            JsonData = "{\"resistor\": 100, \"voltage\": 5}",
                            LessonId = 1,
                            Name = "Mạch mẫu 1",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("ElectricalLearning.Repositories.Entities.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("LessonId");

                    b.ToTable("Exercise");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            LessonId = 1,
                            Title = "Khi đặt vào hai đầu dây dẫn một hiệu điện thế 12V thì cường độ dòng điện chạy qua nó là 0,5A.Tính điện trở? "
                        });
                });

            modelBuilder.Entity("ElectricalLearning.Repositories.Entities.Formula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CircuitModelId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Expression")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CircuitModelId");

                    b.ToTable("Formula");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CircuitModelId = 1,
                            Description = "Cường độ dòng điện chạy qua dây dẫn tỉ lệ thuận với hiệu điện thế đặt vào hai đầu dây và tỉ lệ nghịch với điện trở của dây.",
                            Expression = "I = U / R",
                            IsDeleted = false,
                            Name = "Định luật Ôm"
                        });
                });

            modelBuilder.Entity("ElectricalLearning.Repositories.Entities.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Grade");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = 6
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = 7
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = 8
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = 9
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = 10
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = 11
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Name = 12
                        });
                });

            modelBuilder.Entity("ElectricalLearning.Repositories.Entities.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChapterId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.ToTable("Lesson");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChapterId = 1,
                            IsDeleted = false,
                            Title = "Định luật Ôm"
                        });
                });

            modelBuilder.Entity("ElectricalLearning.Repositories.Entities.Submission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ExerciseId");

                    b.ToTable("Submission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 2,
                            Answer = "R = 6 ohm",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 6, 23, 3, 5, 33, 747, DateTimeKind.Unspecified).AddTicks(361), new TimeSpan(0, 0, 0, 0, 0)),
                            ExerciseId = 1,
                            IsDeleted = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("ElectricalLearning.Repositories.Entities.AIRequest", b =>
                {
                    b.HasOne("ElectricalLearning.Repositories.Entities.Account", "Account")
                        .WithMany("AIRequests")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ElectricalLearning.Repositories.Entities.Chapter", b =>
                {
                    b.HasOne("ElectricalLearning.Repositories.Entities.Grade", "Grade")
                        .WithMany("Chapters")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");
                });

            modelBuilder.Entity("ElectricalLearning.Repositories.Entities.CircuitModel", b =>
                {
                    b.HasOne("ElectricalLearning.Repositories.Entities.Account", "Account")
                        .WithMany("CircuitModels")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectricalLearning.Repositories.Entities.Chapter", null)
                        .WithMany("CircuitModels")
                        .HasForeignKey("ChapterId");

                    b.HasOne("ElectricalLearning.Repositories.Entities.Lesson", "Lesson")
                        .WithMany("CircuitModels")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("ElectricalLearning.Repositories.Entities.Exercise", b =>
                {
                    b.HasOne("ElectricalLearning.Repositories.Entities.Account", null)
                        .WithMany("Exercises")
                        .HasForeignKey("AccountId");

                    b.HasOne("ElectricalLearning.Repositories.Entities.Lesson", "Lesson")
                        .WithMany("Exercises")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("ElectricalLearning.Repositories.Entities.Formula", b =>
                {
                    b.HasOne("ElectricalLearning.Repositories.Entities.CircuitModel", "CircuitModel")
                        .WithMany("Formulas")
                        .HasForeignKey("CircuitModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CircuitModel");
                });

            modelBuilder.Entity("ElectricalLearning.Repositories.Entities.Lesson", b =>
                {
                    b.HasOne("ElectricalLearning.Repositories.Entities.Chapter", "Chapter")
                        .WithMany()
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("ElectricalLearning.Repositories.Entities.Submission", b =>
                {
                    b.HasOne("ElectricalLearning.Repositories.Entities.Account", "Account")
                        .WithMany("Submissions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectricalLearning.Repositories.Entities.Exercise", "Exercise")
                        .WithMany("Submissions")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("ElectricalLearning.Repositories.Entities.Account", b =>
                {
                    b.Navigation("AIRequests");

                    b.Navigation("CircuitModels");

                    b.Navigation("Exercises");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("ElectricalLearning.Repositories.Entities.Chapter", b =>
                {
                    b.Navigation("CircuitModels");
                });

            modelBuilder.Entity("ElectricalLearning.Repositories.Entities.CircuitModel", b =>
                {
                    b.Navigation("Formulas");
                });

            modelBuilder.Entity("ElectricalLearning.Repositories.Entities.Exercise", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("ElectricalLearning.Repositories.Entities.Grade", b =>
                {
                    b.Navigation("Chapters");
                });

            modelBuilder.Entity("ElectricalLearning.Repositories.Entities.Lesson", b =>
                {
                    b.Navigation("CircuitModels");

                    b.Navigation("Exercises");
                });
#pragma warning restore 612, 618
        }
    }
}
